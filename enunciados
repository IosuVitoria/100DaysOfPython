**D√≠as 1‚Äì10: Fundamentos de Python;**
*Objetivo*: familiarizarte con variables, tipos de datos, entrada/salida, y operadores.

1. Imprime "Hola, mundo".
2. Suma dos n√∫meros ingresados por el usuario.
3. Calcula el √°rea de un tri√°ngulo.
4. Intercambia el valor de dos variables.
5. Conversi√≥n de tipos (string a int, float a int, etc.).
6. Determina si un n√∫mero es par o impar.
7. Calcula la edad en a√±os a partir del a√±o de nacimiento.
8. Calcula el √°rea y per√≠metro de un c√≠rculo.
9. Determina si un n√∫mero es positivo, negativo o cero.
10. Conversi√≥n de temperatura (Celsius a Fahrenheit).

üßÆ D√≠as 11‚Äì20: Control de flujo
Objetivo: dominar condicionales y estructuras repetitivas.

Comprobaci√≥n de n√∫mero primo.

Tabla de multiplicar.

Factorial de un n√∫mero.

N√∫meros del 1 al 100 divisibles por 3 y 5.

Adivina el n√∫mero (juego simple).

Suma de los primeros N n√∫meros naturales.

Contador de d√≠gitos de un n√∫mero.

Invertir un n√∫mero.

Pal√≠ndromo de n√∫meros.

Serie de Fibonacci hasta N.

üìú D√≠as 21‚Äì30: Strings y manipulaci√≥n de texto
Objetivo: trabajar con cadenas, slicing, m√©todos y validaciones.

Longitud de una cadena.

Contar vocales en una frase.

Detectar si una palabra es pal√≠ndroma.

Reemplazo de caracteres en string.

Eliminar espacios de una cadena.

Convertir a may√∫sculas/min√∫sculas.

Contar palabras en una oraci√≥n.

Validar email simple.

Encontrar el car√°cter m√°s frecuente.

Comprobar si dos strings son anagramas.

üì¶ D√≠as 31‚Äì40: Listas y colecciones
Objetivo: practicar estructuras de datos como listas, tuplas, sets y diccionarios.

Crear una lista de N n√∫meros aleatorios.

Encontrar el mayor y menor n√∫mero en una lista.

Ordenar una lista sin sort().

Eliminar duplicados de una lista.

Suma y promedio de elementos.

Contar elementos repetidos.

Uso de diccionarios para contar palabras.

Intersecci√≥n de dos listas.

Conversi√≥n de listas a sets.

Diccionario de frecuencia de letras.

üìö D√≠as 41‚Äì50: Funciones
Objetivo: crear y reutilizar c√≥digo mediante funciones.

Funci√≥n que calcule el factorial.

Funci√≥n para comprobar n√∫meros primos.

Funci√≥n para convertir grados.

Funci√≥n que invierta un string.

Funci√≥n con par√°metros opcionales.

Funci√≥n para encontrar n√∫meros pares en lista.

Funci√≥n que reciba otra funci√≥n como par√°metro.

Funci√≥n recursiva (Fibonacci).

Uso de *args y **kwargs.

Decoradores b√°sicos.

üß± D√≠as 51‚Äì60: Estructuras y l√≥gica avanzada
Objetivo: aplicar l√≥gica de programaci√≥n m√°s compleja.

Algoritmo de ordenamiento (burbuja).

Validaci√≥n de contrase√±a fuerte.

Sudoku validator (matriz 9x9).

N√∫meros felices.

Generador de contrase√±as.

Juego de piedra, papel o tijera.

Validaci√≥n de tarjetas de cr√©dito (Luhn).

Contador de palabras m√°s frecuentes en texto largo.

Compresor de strings tipo RLE.

Calendario mensual simple con calendar.

üß∞ D√≠as 61‚Äì70: Manejo de archivos
Objetivo: leer, escribir y manipular archivos en disco.

Leer un archivo .txt l√≠nea por l√≠nea.

Contar l√≠neas, palabras y caracteres.

Buscar una palabra dentro de un archivo.

Escribir texto a un nuevo archivo.

Copiar contenido de un archivo a otro.

Leer archivo CSV.

Crear un archivo JSON con un diccionario.

Leer archivo JSON y extraer datos.

Reemplazar una palabra en un archivo.

Registro de actividad con timestamps.

üß™ D√≠as 71‚Äì80: POO ‚Äì Programaci√≥n Orientada a Objetos
Objetivo: entender clases, objetos, herencia, m√©todos y atributos.

Clase Persona con nombre y edad.

M√©todos para mostrar y modificar datos.

Clase CuentaBancaria con dep√≥sito y retiro.

Herencia: clase Empleado hereda de Persona.

Clase con m√©todo __str__.

Contador de instancias con variable de clase.

Herencia m√∫ltiple.

Sobrecarga de operadores.

Clase abstracta.

Sistema simple de facturaci√≥n orientado a objetos.

üß™ D√≠as 81‚Äì90: Librer√≠as est√°ndar y externas
Objetivo: usar m√≥dulos y herramientas comunes de Python.

Uso de random para simular un dado.

Temporizador con time.sleep().

Generador de fechas con datetime.

Generar gr√°ficos simples con matplotlib.

Uso de os para listar archivos.

Descarga de archivos con requests.

Parsear datos HTML con BeautifulSoup.

Uso b√°sico de pandas para analizar un CSV.

Crear un gr√°fico de barras con pandas.

Web scraping de precios con requests + bs4.

üß† D√≠as 91‚Äì100: Proyectos finales y desaf√≠os
Objetivo: aplicar todo lo aprendido.

Juego de adivinar el n√∫mero (POO + l√≥gica).

Analizador de sentimientos de texto (con librer√≠a externa).

Gestor de tareas en consola (CRUD b√°sico).

Conversor de moneda con API de tipo de cambio.

Mini calculadora en consola.

Simulaci√≥n de cajero autom√°tico.

Lector de notas desde un archivo JSON.

Analizador de logs de sistema.

Web scraper de noticias y guardado en CSV.

Proyecto libre: usa lo aprendido para algo √∫til o divertido.